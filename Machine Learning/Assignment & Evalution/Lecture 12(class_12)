{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7b030c85",
   "metadata": {},
   "source": [
    "# Classification implementation continued"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b75fba0f",
   "metadata": {},
   "source": [
    "## Banknote Dataset\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b28b463",
   "metadata": {},
   "source": [
    "The dataset contains 1,372 rows with 5 numeric variables. It is a classification problem with two classes (binary classification).\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c37a7f5",
   "metadata": {},
   "source": [
    "Below provides a list of the five variables in the dataset.\n",
    "\n",
    "- variance of Wavelet Transformed image (continuous).\n",
    "- skewness of Wavelet Transformed image (continuous).\n",
    "- kurtosis of Wavelet Transformed image (continuous).\n",
    "- entropy of image (continuous).\n",
    "- class (integer).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "ab31502f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "data=pd.read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt\",header=None)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "42198c3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.columns=['variance','skewness','kurtosis','entropy','class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "1bdc2f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variance</th>\n",
       "      <th>skewness</th>\n",
       "      <th>kurtosis</th>\n",
       "      <th>entropy</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.62160</td>\n",
       "      <td>8.66610</td>\n",
       "      <td>-2.8073</td>\n",
       "      <td>-0.44699</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.54590</td>\n",
       "      <td>8.16740</td>\n",
       "      <td>-2.4586</td>\n",
       "      <td>-1.46210</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.86600</td>\n",
       "      <td>-2.63830</td>\n",
       "      <td>1.9242</td>\n",
       "      <td>0.10645</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.45660</td>\n",
       "      <td>9.52280</td>\n",
       "      <td>-4.0112</td>\n",
       "      <td>-3.59440</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.32924</td>\n",
       "      <td>-4.45520</td>\n",
       "      <td>4.5718</td>\n",
       "      <td>-0.98880</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1367</th>\n",
       "      <td>0.40614</td>\n",
       "      <td>1.34920</td>\n",
       "      <td>-1.4501</td>\n",
       "      <td>-0.55949</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1368</th>\n",
       "      <td>-1.38870</td>\n",
       "      <td>-4.87730</td>\n",
       "      <td>6.4774</td>\n",
       "      <td>0.34179</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1369</th>\n",
       "      <td>-3.75030</td>\n",
       "      <td>-13.45860</td>\n",
       "      <td>17.5932</td>\n",
       "      <td>-2.77710</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1370</th>\n",
       "      <td>-3.56370</td>\n",
       "      <td>-8.38270</td>\n",
       "      <td>12.3930</td>\n",
       "      <td>-1.28230</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1371</th>\n",
       "      <td>-2.54190</td>\n",
       "      <td>-0.65804</td>\n",
       "      <td>2.6842</td>\n",
       "      <td>1.19520</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1372 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      variance  skewness  kurtosis  entropy  class\n",
       "0      3.62160   8.66610   -2.8073 -0.44699      0\n",
       "1      4.54590   8.16740   -2.4586 -1.46210      0\n",
       "2      3.86600  -2.63830    1.9242  0.10645      0\n",
       "3      3.45660   9.52280   -4.0112 -3.59440      0\n",
       "4      0.32924  -4.45520    4.5718 -0.98880      0\n",
       "...        ...       ...       ...      ...    ...\n",
       "1367   0.40614   1.34920   -1.4501 -0.55949      1\n",
       "1368  -1.38870  -4.87730    6.4774  0.34179      1\n",
       "1369  -3.75030 -13.45860   17.5932 -2.77710      1\n",
       "1370  -3.56370  -8.38270   12.3930 -1.28230      1\n",
       "1371  -2.54190  -0.65804    2.6842  1.19520      1\n",
       "\n",
       "[1372 rows x 5 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "60228240",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gini(temp):\n",
    "    \"\"\"Calculate the Gini Impurity for a dataframe.\n",
    "    There are a few different ways to do this, I thought this one was\n",
    "    the most concise. See:\n",
    "    https://en.wikipedia.org/wiki/Decision_tree_learning#Gini_impurity\n",
    "    \"\"\"\n",
    "    counts = temp['class'].value_counts().to_dict()\n",
    "    impurity = 1\n",
    "    for lbl in counts:\n",
    "        prob_of_lbl = counts[lbl] / float(len(temp))\n",
    "        impurity -= prob_of_lbl**2\n",
    "    return impurity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "98373012",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.49386310125882926"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gini(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "6c6dd1da",
   "metadata": {},
   "outputs": [],
   "source": [
    "def info_gain(left, right, current_uncertainty):\n",
    "    \"\"\"Information Gain.\n",
    "\n",
    "    The uncertainty of the starting node, minus the weighted impurity of\n",
    "    two child nodes.\n",
    "    \"\"\"\n",
    "    fraction = float(len(left)) / (len(left) + len(right))\n",
    "    return current_uncertainty - fraction * gini(left) - (1 - fraction) * gini(right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "93fafea1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Question:\n",
    "    \"\"\"A Question is used to partition a dataset.\n",
    "\n",
    "    This class just records a 'column Name' (e.g., company for company) and a\n",
    "    'column value' (e.g., google). The 'match' method is used to compare\n",
    "    the feature value in an example to the feature value stored in the\n",
    "    question.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, column, value):\n",
    "        self.column = column\n",
    "        self.value = value\n",
    "\n",
    "    def match(self, example):\n",
    "        # This has been used to filter out dataframes based on a question\n",
    "        val = example[self.column]\n",
    "        if is_numeric(self.value):\n",
    "            return val >= self.value\n",
    "        else:\n",
    "            return val == self.value\n",
    "\n",
    "    def __repr__(self):\n",
    "        # This is just a helper method to print\n",
    "        # the question in a readable format.\n",
    "        condition = \"==\"\n",
    "        if is_numeric(self.value):\n",
    "            condition = \">=\"\n",
    "        return \"Is %s %s %s?\" % (self.column, condition, str(self.value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "8ed9f2fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1372.000000\n",
       "mean        0.433735\n",
       "std         2.842763\n",
       "min        -7.042100\n",
       "25%        -1.773000\n",
       "50%         0.496180\n",
       "75%         2.821475\n",
       "max         6.824800\n",
       "Name: variance, dtype: float64"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['variance'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "7a3a467f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_numeric(value):\n",
    "    \"\"\"Test if a value is numeric.\"\"\"\n",
    "    return isinstance(value, int) or isinstance(value, float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "15a7f831",
   "metadata": {},
   "outputs": [],
   "source": [
    "q=Question('variance',0.433735)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "0a854f5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'variance'"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q.column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "21548f04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.433735"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q.value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "299ba556",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variance</th>\n",
       "      <th>skewness</th>\n",
       "      <th>kurtosis</th>\n",
       "      <th>entropy</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.6216</td>\n",
       "      <td>8.66610</td>\n",
       "      <td>-2.8073</td>\n",
       "      <td>-0.446990</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.5459</td>\n",
       "      <td>8.16740</td>\n",
       "      <td>-2.4586</td>\n",
       "      <td>-1.462100</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.8660</td>\n",
       "      <td>-2.63830</td>\n",
       "      <td>1.9242</td>\n",
       "      <td>0.106450</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.4566</td>\n",
       "      <td>9.52280</td>\n",
       "      <td>-4.0112</td>\n",
       "      <td>-3.594400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.3684</td>\n",
       "      <td>9.67180</td>\n",
       "      <td>-3.9606</td>\n",
       "      <td>-3.162500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1344</th>\n",
       "      <td>1.3451</td>\n",
       "      <td>0.23589</td>\n",
       "      <td>-1.8785</td>\n",
       "      <td>1.325800</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1345</th>\n",
       "      <td>2.2279</td>\n",
       "      <td>4.09510</td>\n",
       "      <td>-4.8037</td>\n",
       "      <td>-2.111200</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1346</th>\n",
       "      <td>1.2572</td>\n",
       "      <td>4.87310</td>\n",
       "      <td>-5.2861</td>\n",
       "      <td>-5.874100</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1351</th>\n",
       "      <td>1.3183</td>\n",
       "      <td>1.90170</td>\n",
       "      <td>-3.3111</td>\n",
       "      <td>0.065071</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1352</th>\n",
       "      <td>1.4896</td>\n",
       "      <td>3.42880</td>\n",
       "      <td>-4.0309</td>\n",
       "      <td>-1.425900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>692 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      variance  skewness  kurtosis   entropy  class\n",
       "0       3.6216   8.66610   -2.8073 -0.446990      0\n",
       "1       4.5459   8.16740   -2.4586 -1.462100      0\n",
       "2       3.8660  -2.63830    1.9242  0.106450      0\n",
       "3       3.4566   9.52280   -4.0112 -3.594400      0\n",
       "5       4.3684   9.67180   -3.9606 -3.162500      0\n",
       "...        ...       ...       ...       ...    ...\n",
       "1344    1.3451   0.23589   -1.8785  1.325800      1\n",
       "1345    2.2279   4.09510   -4.8037 -2.111200      1\n",
       "1346    1.2572   4.87310   -5.2861 -5.874100      1\n",
       "1351    1.3183   1.90170   -3.3111  0.065071      1\n",
       "1352    1.4896   3.42880   -4.0309 -1.425900      1\n",
       "\n",
       "[692 rows x 5 columns]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[q.column]>=q.value]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "3f230942",
   "metadata": {},
   "outputs": [],
   "source": [
    "def class_counts(df):\n",
    "    \"\"\"Counts the number of each type of example in a dataset.\"\"\"\n",
    "    return df['class'].value_counts().to_dict()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "8d334b75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 762, 1: 610}"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_counts(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "758067bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variance</th>\n",
       "      <th>skewness</th>\n",
       "      <th>kurtosis</th>\n",
       "      <th>entropy</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.6216</td>\n",
       "      <td>8.66610</td>\n",
       "      <td>-2.8073</td>\n",
       "      <td>-0.446990</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.5459</td>\n",
       "      <td>8.16740</td>\n",
       "      <td>-2.4586</td>\n",
       "      <td>-1.462100</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.8660</td>\n",
       "      <td>-2.63830</td>\n",
       "      <td>1.9242</td>\n",
       "      <td>0.106450</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.4566</td>\n",
       "      <td>9.52280</td>\n",
       "      <td>-4.0112</td>\n",
       "      <td>-3.594400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.3684</td>\n",
       "      <td>9.67180</td>\n",
       "      <td>-3.9606</td>\n",
       "      <td>-3.162500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1344</th>\n",
       "      <td>1.3451</td>\n",
       "      <td>0.23589</td>\n",
       "      <td>-1.8785</td>\n",
       "      <td>1.325800</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1345</th>\n",
       "      <td>2.2279</td>\n",
       "      <td>4.09510</td>\n",
       "      <td>-4.8037</td>\n",
       "      <td>-2.111200</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1346</th>\n",
       "      <td>1.2572</td>\n",
       "      <td>4.87310</td>\n",
       "      <td>-5.2861</td>\n",
       "      <td>-5.874100</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1351</th>\n",
       "      <td>1.3183</td>\n",
       "      <td>1.90170</td>\n",
       "      <td>-3.3111</td>\n",
       "      <td>0.065071</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1352</th>\n",
       "      <td>1.4896</td>\n",
       "      <td>3.42880</td>\n",
       "      <td>-4.0309</td>\n",
       "      <td>-1.425900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>692 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      variance  skewness  kurtosis   entropy  class\n",
       "0       3.6216   8.66610   -2.8073 -0.446990      0\n",
       "1       4.5459   8.16740   -2.4586 -1.462100      0\n",
       "2       3.8660  -2.63830    1.9242  0.106450      0\n",
       "3       3.4566   9.52280   -4.0112 -3.594400      0\n",
       "5       4.3684   9.67180   -3.9606 -3.162500      0\n",
       "...        ...       ...       ...       ...    ...\n",
       "1344    1.3451   0.23589   -1.8785  1.325800      1\n",
       "1345    2.2279   4.09510   -4.8037 -2.111200      1\n",
       "1346    1.2572   4.87310   -5.2861 -5.874100      1\n",
       "1351    1.3183   1.90170   -3.3111  0.065071      1\n",
       "1352    1.4896   3.42880   -4.0309 -1.425900      1\n",
       "\n",
       "[692 rows x 5 columns]"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[q.match(data)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "b8171057",
   "metadata": {},
   "outputs": [],
   "source": [
    "def partition(temp, question):\n",
    "    \"\"\"Partitions a dataset.\n",
    "    \"\"\"\n",
    "    return temp[question.match(temp)], temp[question.match(temp)==False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "63218e5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def info_gain(left, right, current_uncertainty):\n",
    "    \"\"\"Information Gain.\n",
    "\n",
    "    The uncertainty of the starting node, minus the weighted impurity of\n",
    "    two child nodes.\n",
    "    \"\"\"\n",
    "    fraction = float(len(left)) / (len(left) + len(right))\n",
    "    return current_uncertainty - fraction * gini(left) - (1 - fraction) * gini(right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "07586148",
   "metadata": {},
   "outputs": [],
   "source": [
    "current_uncertainty = gini(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "9e9c7d61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1570514220030863"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "true_rows, false_rows = partition(data, Question('variance', -1.57680))\n",
    "info_gain(true_rows, false_rows, current_uncertainty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "3befc77d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-7.0421    , -6.9020303 , -6.76196061, -6.62189091, -6.48182121,\n",
       "       -6.34175152, -6.20168182, -6.06161212, -5.92154242, -5.78147273,\n",
       "       -5.64140303, -5.50133333, -5.36126364, -5.22119394, -5.08112424,\n",
       "       -4.94105455, -4.80098485, -4.66091515, -4.52084545, -4.38077576,\n",
       "       -4.24070606, -4.10063636, -3.96056667, -3.82049697, -3.68042727,\n",
       "       -3.54035758, -3.40028788, -3.26021818, -3.12014848, -2.98007879,\n",
       "       -2.84000909, -2.69993939, -2.5598697 , -2.4198    , -2.2797303 ,\n",
       "       -2.13966061, -1.99959091, -1.85952121, -1.71945152, -1.57938182,\n",
       "       -1.43931212, -1.29924242, -1.15917273, -1.01910303, -0.87903333,\n",
       "       -0.73896364, -0.59889394, -0.45882424, -0.31875455, -0.17868485,\n",
       "       -0.03861515,  0.10145455,  0.24152424,  0.38159394,  0.52166364,\n",
       "        0.66173333,  0.80180303,  0.94187273,  1.08194242,  1.22201212,\n",
       "        1.36208182,  1.50215152,  1.64222121,  1.78229091,  1.92236061,\n",
       "        2.0624303 ,  2.2025    ,  2.3425697 ,  2.48263939,  2.62270909,\n",
       "        2.76277879,  2.90284848,  3.04291818,  3.18298788,  3.32305758,\n",
       "        3.46312727,  3.60319697,  3.74326667,  3.88333636,  4.02340606,\n",
       "        4.16347576,  4.30354545,  4.44361515,  4.58368485,  4.72375455,\n",
       "        4.86382424,  5.00389394,  5.14396364,  5.28403333,  5.42410303,\n",
       "        5.56417273,  5.70424242,  5.84431212,  5.98438182,  6.12445152,\n",
       "        6.26452121,  6.40459091,  6.54466061,  6.6847303 ,  6.8248    ])"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.linspace(data['variance'].min(),data['variance'].max(),100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "45218e8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-7.0421    , -6.223848  , -5.298302  , -4.842158  , -4.397516  ,\n",
       "       -4.14515   , -3.938136  , -3.80536   , -3.599364  , -3.500423  ,\n",
       "       -3.30979   , -3.08888   , -2.957672  , -2.791262  , -2.665116  ,\n",
       "       -2.57345   , -2.48382   , -2.411395  , -2.322562  , -2.259887  ,\n",
       "       -2.17636   , -2.075445  , -1.997246  , -1.906914  , -1.838576  ,\n",
       "       -1.773     , -1.710262  , -1.649224  , -1.557788  , -1.459496  ,\n",
       "       -1.39701   , -1.3       , -1.237488  , -1.089456  , -0.9604942 ,\n",
       "       -0.880021  , -0.7868944 , -0.7132471 , -0.6205582 , -0.5087397 ,\n",
       "       -0.404088  , -0.3036886 , -0.2340172 , -0.1239716 , -0.02178476,\n",
       "        0.04898145,  0.160401  ,  0.2455717 ,  0.3248208 ,  0.3798    ,\n",
       "        0.49618   ,  0.5488641 ,  0.5975572 ,  0.6732323 ,  0.7532152 ,\n",
       "        0.856054  ,  0.9109708 ,  0.967456  ,  1.06397   ,  1.16378   ,\n",
       "        1.273     ,  1.353164  ,  1.507744  ,  1.587716  ,  1.710636  ,\n",
       "        1.812765  ,  1.908946  ,  2.010116  ,  2.093896  ,  2.194795  ,\n",
       "        2.29175   ,  2.42083   ,  2.533532  ,  2.613388  ,  2.70621   ,\n",
       "        2.821475  ,  2.941348  ,  3.053333  ,  3.189042  ,  3.270526  ,\n",
       "        3.42152   ,  3.479079  ,  3.53756   ,  3.621355  ,  3.740832  ,\n",
       "        3.80244   ,  3.883248  ,  3.930632  ,  3.983296  ,  4.046006  ,\n",
       "        4.11793   ,  4.18607   ,  4.281264  ,  4.394096  ,  4.593418  ,\n",
       "        4.714415  ,  4.92514   ,  5.059555  ,  5.269888  ,  5.693093  ,\n",
       "        6.8248    ,  6.8248    ])"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "9888fa97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0., 100., 200., 300., 400., 500., 600., 700., 800., 900.])"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linspace(0,900,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "41dc3780",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "1bc72817",
   "metadata": {},
   "outputs": [],
   "source": [
    "gain,ques=find_best_split(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "428338ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "true_rows,false_rows=partition(data,ques)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "8b62041b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Leaf:\n",
    "    \"\"\"A Leaf node classifies data.\n",
    "\n",
    "    This holds a dictionary of class (e.g., \"Apple\") -> number of times\n",
    "    it appears in the rows from the training data that reach this leaf.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, df):\n",
    "        self.predictions = class_counts(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "e732dd7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Decision_Node:\n",
    "    \"\"\"A Decision Node asks a question.\n",
    "\n",
    "    This holds a reference to the question, and to the two child nodes.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self,\n",
    "                 question,\n",
    "                 true_branch,\n",
    "                 false_branch):\n",
    "        self.question = question\n",
    "        self.true_branch = true_branch\n",
    "        self.false_branch = false_branch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "65c6308b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_tree(rows):\n",
    "    \"\"\"Builds the tree.\n",
    "\n",
    "    Rules of recursion: 1) Believe that it works. 2) Start by checking\n",
    "    for the base case (no further information gain). 3) Prepare for\n",
    "    giant stack traces.\n",
    "    \"\"\"\n",
    "\n",
    "    # Try partitioing the dataset on each of the unique attribute,\n",
    "    # calculate the information gain,\n",
    "    # and return the question that produces the highest gain.\n",
    "    gain, question = find_best_split(rows)\n",
    "\n",
    "    # Base case: no further info gain\n",
    "    # Since we can ask no further questions,\n",
    "    # we'll return a leaf.\n",
    "    if gain == 0:\n",
    "        return Leaf(rows)\n",
    "\n",
    "    # If we reach here, we have found a useful feature / value\n",
    "    # to partition on.\n",
    "    true_rows, false_rows = partition(rows, question)\n",
    "\n",
    "    # Recursively build the true branch.\n",
    "    true_branch = build_tree(true_rows)\n",
    "\n",
    "    # Recursively build the false branch.\n",
    "    false_branch = build_tree(false_rows)\n",
    "\n",
    "    # Return a Question node.\n",
    "    # This records the best feature / value to ask at this point,\n",
    "    # as well as the branches to follow\n",
    "    # dependingo on the answer.\n",
    "    return Decision_Node(question, true_branch, false_branch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "42306097",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_tree(node, spacing=\"\"):\n",
    "    \"\"\"World's most elegant tree printing function.\"\"\"\n",
    "\n",
    "    # Base case: we've reached a leaf\n",
    "    if isinstance(node, Leaf):\n",
    "        print (spacing + \"Predict\", node.predictions)\n",
    "        return\n",
    "\n",
    "    # Print the question at this node\n",
    "    print (spacing + str(node.question))\n",
    "\n",
    "    # Call this function recursively on the true branch\n",
    "    print (spacing + '--> True:')\n",
    "    print_tree(node.true_branch, spacing + \"  \")\n",
    "\n",
    "    # Call this function recursively on the false branch\n",
    "    print (spacing + '--> False:')\n",
    "    print_tree(node.false_branch, spacing + \"  \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "af8e32bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_best_split(df):\n",
    "    \"\"\"Find the best question to ask by iterating over every feature / value\n",
    "    and calculating the information gain.\"\"\"\n",
    "    best_gain = 0  # keep track of the best information gain\n",
    "    best_question = None  # keep train of the feature / value that produced it\n",
    "    current_uncertainty = gini(df)\n",
    "    n_features = len(df.columns) - 1  # number of columns\n",
    "\n",
    "    for col in df.columns[:-1]:  # for each feature\n",
    "        if(is_numeric(df[col].iloc[0])):\n",
    "            # For values equally spaced on the number line\n",
    "            values=np.linspace(data['variance'].min(),data['variance'].max(),50)\n",
    "            # For percentiles\n",
    "            #values=data[col].describe(percentiles=[x/100 for x in range(101)]).values[10:60]\n",
    "            \n",
    "            #values = df[col].unique()  # unique values in the column\n",
    "        else:\n",
    "            values = df[col].unique()  # unique values in the column\n",
    "\n",
    "        for val in values:  # for each value\n",
    "\n",
    "            question = Question(col, val)\n",
    "\n",
    "            # try splitting the dataset\n",
    "            true_rows, false_rows = partition(df, question)\n",
    "\n",
    "            # Skip this split if it doesn't divide the\n",
    "            # dataset.\n",
    "            if len(true_rows) == 0 or len(false_rows) == 0:\n",
    "                continue\n",
    "\n",
    "            # Calculate the information gain from this split\n",
    "            gain = info_gain(true_rows, false_rows, current_uncertainty)\n",
    "\n",
    "            # You actually can use '>' instead of '>=' here\n",
    "            # but I wanted the tree to look a certain way for our\n",
    "            # toy dataset.\n",
    "            if gain >= best_gain:\n",
    "                best_gain, best_question = gain, question\n",
    "\n",
    "    return best_gain, best_question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "800b0ede",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time taken= 40.765543937683105\n"
     ]
    }
   ],
   "source": [
    "import time as tm\n",
    "start=tm.time()\n",
    "my_tree = build_tree(data)\n",
    "end=tm.time()\n",
    "print(\"time taken=\",end-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "f7a5f1e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time taken= 7.1651930809021\n"
     ]
    }
   ],
   "source": [
    "import time as tm\n",
    "start=tm.time()\n",
    "my_tree = build_tree(data)\n",
    "end=tm.time()\n",
    "print(\"time taken=\",end-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "c53b3e25",
   "metadata": {},
   "outputs": [],
   "source": [
    "def classify(row, node):\n",
    "    \"\"\"See the 'rules of recursion' above.\"\"\"\n",
    "\n",
    "    # Base case: we've reached a leaf\n",
    "    if isinstance(node, Leaf):\n",
    "        return node.predictions\n",
    "\n",
    "    # Decide whether to follow the true-branch or the false-branch.\n",
    "    # Compare the feature / value stored in the node,\n",
    "    # to the example we're considering.\n",
    "    if node.question.match(row):\n",
    "        return classify(row, node.true_branch)\n",
    "    else:\n",
    "        return classify(row, node.false_branch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "97a149d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 433}"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classify(data.iloc[0], my_tree)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "c0cb0733",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_leaf(counts):\n",
    "    \"\"\"A nicer way to print the predictions at a leaf.\"\"\"\n",
    "    total = sum(counts.values()) * 1.0\n",
    "    probs = {}\n",
    "    for lbl in counts.keys():\n",
    "        probs[lbl] = str(int(counts[lbl] / total * 100)) + \"%\"\n",
    "    return probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "05b9a125",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 0.0. Predicted: 0\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n",
      "Actual: 1.0. Predicted: 1\n"
     ]
    }
   ],
   "source": [
    "for index,row in data.iterrows():\n",
    "    d = classify(row, my_tree)\n",
    "    Keymax = max(zip(d.values(), d.keys()))[1]\n",
    "    print (\"Actual: %s. Predicted: %s\" % (row['class'], Keymax))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "e31d0bfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is variance >= 0.3223?\n",
      "--> True:\n",
      "  Is kurtosis >= -4.3839?\n",
      "  --> True:\n",
      "    Is variance >= 1.594?\n",
      "    --> True:\n",
      "      Is variance >= 2.0421?\n",
      "      --> True:\n",
      "        Predict {0: 433}\n",
      "      --> False:\n",
      "        Is kurtosis >= -2.3386?\n",
      "        --> True:\n",
      "          Predict {0: 52}\n",
      "        --> False:\n",
      "          Is entropy >= -1.7207?\n",
      "          --> True:\n",
      "            Predict {1: 3}\n",
      "          --> False:\n",
      "            Predict {0: 1}\n",
      "    --> False:\n",
      "      Is kurtosis >= -2.2718?\n",
      "      --> True:\n",
      "        Is entropy >= 0.097399?\n",
      "        --> True:\n",
      "          Is kurtosis >= 2.0013?\n",
      "          --> True:\n",
      "            Predict {0: 18}\n",
      "          --> False:\n",
      "            Is skewness >= 6.1189?\n",
      "            --> True:\n",
      "              Predict {0: 2}\n",
      "            --> False:\n",
      "              Predict {1: 17}\n",
      "        --> False:\n",
      "          Is variance >= 0.4339?\n",
      "          --> True:\n",
      "            Predict {0: 103}\n",
      "          --> False:\n",
      "            Is kurtosis >= -1.1982?\n",
      "            --> True:\n",
      "              Predict {0: 16}\n",
      "            --> False:\n",
      "              Predict {1: 1}\n",
      "      --> False:\n",
      "        Is skewness >= 7.6377?\n",
      "        --> True:\n",
      "          Predict {0: 3}\n",
      "        --> False:\n",
      "          Predict {1: 24}\n",
      "  --> False:\n",
      "    Is skewness >= 9.1814?\n",
      "    --> True:\n",
      "      Predict {0: 10}\n",
      "    --> False:\n",
      "      Predict {1: 32}\n",
      "--> False:\n",
      "  Is skewness >= 7.6274?\n",
      "  --> True:\n",
      "    Is variance >= -4.2859?\n",
      "    --> True:\n",
      "      Predict {0: 85}\n",
      "    --> False:\n",
      "      Predict {1: 20}\n",
      "  --> False:\n",
      "    Is variance >= -0.39816?\n",
      "    --> True:\n",
      "      Is skewness >= 5.8974?\n",
      "      --> True:\n",
      "        Predict {0: 11}\n",
      "      --> False:\n",
      "        Is kurtosis >= 3.1143?\n",
      "        --> True:\n",
      "          Is entropy >= 1.547?\n",
      "          --> True:\n",
      "            Predict {1: 1}\n",
      "          --> False:\n",
      "            Predict {0: 11}\n",
      "        --> False:\n",
      "          Predict {1: 58}\n",
      "    --> False:\n",
      "      Is kurtosis >= 6.2204?\n",
      "      --> True:\n",
      "        Is skewness >= -4.6062?\n",
      "        --> True:\n",
      "          Is kurtosis >= 6.7756?\n",
      "          --> True:\n",
      "            Predict {0: 15}\n",
      "          --> False:\n",
      "            Is entropy >= -0.056479?\n",
      "            --> True:\n",
      "              Predict {1: 1}\n",
      "            --> False:\n",
      "              Predict {0: 1}\n",
      "        --> False:\n",
      "          Predict {1: 130}\n",
      "      --> False:\n",
      "        Is skewness >= 7.3273?\n",
      "        --> True:\n",
      "          Is entropy >= -1.4543?\n",
      "          --> True:\n",
      "            Predict {0: 1}\n",
      "          --> False:\n",
      "            Predict {1: 3}\n",
      "        --> False:\n",
      "          Predict {1: 320}\n"
     ]
    }
   ],
   "source": [
    "print_tree(my_tree)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb459451",
   "metadata": {},
   "source": [
    "# Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "b7ecfa44",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp=pd.DataFrame([x.split(\"\\t\") for x in \"\"\"Lemon\t1\n",
    "Lemon\t1.2\n",
    "Lemon\t1.3\n",
    "Lemon\t1.4\n",
    "Lemon\t1.5\n",
    "Lemon\t1.6\n",
    "Orange\t1.7\n",
    "Orange\t1.8\n",
    "Orange\t1.9\n",
    "Orange\t2\n",
    "Orange\t2.1\n",
    "Orange\t2.2\n",
    "Orange\t2.3\n",
    "Orange\t2.4\"\"\".split(\"\\n\")],columns=['Label','Diameter'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "64a85de9",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp['y']=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "0b78c430",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp['Diameter']=temp['Diameter'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "c40fa0c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Label</th>\n",
       "      <th>Diameter</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lemon</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lemon</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lemon</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lemon</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lemon</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lemon</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Orange</td>\n",
       "      <td>1.7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Orange</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Orange</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Orange</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Orange</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Orange</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Orange</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Orange</td>\n",
       "      <td>2.4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Label  Diameter  y\n",
       "0    Lemon       1.0  0\n",
       "1    Lemon       1.2  0\n",
       "2    Lemon       1.3  0\n",
       "3    Lemon       1.4  0\n",
       "4    Lemon       1.5  0\n",
       "5    Lemon       1.6  0\n",
       "6   Orange       1.7  0\n",
       "7   Orange       1.8  0\n",
       "8   Orange       1.9  0\n",
       "9   Orange       2.0  0\n",
       "10  Orange       2.1  0\n",
       "11  Orange       2.2  0\n",
       "12  Orange       2.3  0\n",
       "13  Orange       2.4  0"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "d50fbf66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Diameter', ylabel='y'>"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='Diameter',y='y',hue='Label',data=temp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ef7f221",
   "metadata": {},
   "source": [
    "### What is a Support Vector Machine?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1fe4160",
   "metadata": {},
   "source": [
    "Support Vector Machine(SVM) is a supervised machine learning algorithm used for both classification and regression. Although its best suited for classification. The objective of SVM algorithm is to find a hyperplane in an N-dimensional space that distinctly classifies the data points. The dimension of the hyperplane depends upon the number of features. If the number of input features is two, then the hyperplane is just a line. If the number of input features is three, then the hyperplane becomes a 2-D plane. It becomes difficult to imagine when the number of features exceeds three. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f870ca0",
   "metadata": {},
   "source": [
    "Out of infinite possible hyperplanes the best possible hyperplane the best hyper plane is chosen based on maximum distances between the two classes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bd78117",
   "metadata": {},
   "source": [
    "## Effect of outliers in SVM to be discussed while maths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31abb0be",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "57e8759a",
   "metadata": {},
   "source": [
    "### When to use logistic regression vs Support vector machine?\n",
    "\n",
    "SVM works best when the dataset is small and complex i.e. when there is possibility of overfitting in logistics regression. It is usually advisable to first use logistic regression and see how does it performs, if it fails to give a good accuracy you can go for SVM without any kernel. Logistic regression and SVM without any kernel have similar performance but depending on your features, one may be more efficient than the other."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f73cbbf1",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### Types of Support Vector Machine\n",
    "#### Linear SVM\n",
    "When the data is perfectly linearly separable only then we can use Linear SVM. Perfectly linearly separable means that the data points can be classified into 2 classes by using a single straight line(if 2D).\n",
    "\n",
    "#### Non-Linear SVM\n",
    "When the data is not linearly separable then we can use Non-Linear SVM, which means when the data points cannot be separated into 2 classes by using a straight line (if 2D) then we use some advanced techniques like kernel tricks to classify them. In most real-world applications we do not find linearly separable datapoints hence we use kernel trick to solve them.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc7e78b8",
   "metadata": {},
   "source": [
    "# Terminology"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fde02d98",
   "metadata": {},
   "source": [
    "<b>Support Vectors:</b> These are the points that are closest to the hyperplane. A separating line will be defined with the help of these data points.\n",
    "\n",
    "<b>Margin:</b> it is the distance between the hyperplane and the observations closest to the hyperplane (support vectors). In SVM large margin is considered a good margin. There are two types of margins hard margin and soft margin. I will talk more about these two in the later section."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a9d34b0",
   "metadata": {},
   "source": [
    "<div>\n",
    "<img src=\"https://miro.medium.com/proxy/0*KYsgeNVhnm_ASBoM.png\" width=\"800\">\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b096182",
   "metadata": {},
   "source": [
    "\n",
    "### How does Support Vector Machine work?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc26d8c2",
   "metadata": {},
   "source": [
    "SVM is defined such that it is defined in terms of the support vectors only, we don’t have to worry about other observations since the margin is made using the points which are closest to the hyperplane (support vectors), whereas in logistic regression the classifier is defined over all the points. Hence SVM enjoys some natural speed-ups.\n",
    "Let’s understand the working of SVM using an example. Suppose we have a dataset that has two classes (green and blue). We want to classify that the new data point as either blue or green."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "18dc2aab",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.DataFrame()\n",
    "x=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n",
    "y1=[7,5,9,6,10,7,5,12,8,4,7,5,8,9,11,7,4,18]\n",
    "label=['blue','blue','blue','blue','blue','blue','blue','blue','blue','red','red','red','red','red','red','red','red','red']\n",
    "data['x']=x\n",
    "data['y']=y1\n",
    "data['label']=label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63f6fadb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "e037125a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "adc56ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 10))\n",
    "#plt.scatter(np.array(range(100)), np.array([f(x) for x in range(100)]),  color='black')\n",
    "sns.scatterplot(x='x',y='y',hue='label',data=data,s=100)\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Entropy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78167987",
   "metadata": {},
   "source": [
    "To classify these points, we can have many decision boundaries, but the question is which is the best and how do we find it? NOTE: Since we are plotting the data points in a 2-dimensional graph we call this decision boundary a straight line but if we have more dimensions, we call this decision boundary a “hyperplane”\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af81ad3",
   "metadata": {},
   "source": [
    "The best hyperplane is that plane that has the maximum distance from both the classes, and this is the main aim of SVM. This is done by finding different hyperplanes which classify the labels in the best way then it will choose the one which is farthest from the data points or the one which has a maximum margin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c05998be",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b7839321",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### Mathematical Intuition behind Support Vector Machine\n",
    "Many people skip the math intuition behind this algorithm because it is pretty hard to digest. Here in this section, we’ll try to understand each and every step working under the hood. SVM is a broad topic and people are still doing research on this algorithm. If you are planning to do research, then this might not be the right place for you.\n",
    "\n",
    "Here we will understand only that part that is required in implementing this algorithm. You must have heard about the primal formulation, dual formulation, Lagranges multiplier etc. I am not saying these topics aren’t important, but they are more important if you are planning to do research in this area. Let’s move ahead and see the magic behind this algorithm.\n",
    "\n",
    "Before getting into the nitty-gritty details of this topic first let’s understand what a dot product is.\n",
    "\n",
    "#### Dot-Product\n",
    "\n",
    "\n",
    "#### Use of Dot Product in SVM:\n",
    "\n",
    "\n",
    "#### Margin in Support Vector Machine\n",
    "\n",
    "\n",
    "### Optimization function and its constraints\n",
    "\n",
    "\n",
    "\n",
    "### Soft Margin SVM\n",
    "\n",
    "\n",
    "### Kernels in Support Vector Machine\n",
    "\n",
    "\n",
    "### Different Kernel functions\n",
    "\n",
    "\n",
    "- Polynomial kernel\n",
    "- Sigmoid kernel\n",
    "- RBF kernel\n",
    "- Bessel function kernel\n",
    "- Anova Kernel\n",
    "\n",
    "### How to choose the right Kernel? \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "662af80a",
   "metadata": {},
   "source": [
    "### Implementation and hyperparameter tuning of Support Vector Machine in Python \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "0b3bd557",
   "metadata": {},
   "outputs": [],
   "source": [
    "link='https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/income_evaluation.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9c21c33",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ab86008",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
